name: Release Builds

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }} binary
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # 32-bit Linux runners are not available; only publish 64-bit builds.
          - os: linux
            runner: ubuntu-latest
            archive: OcarinaArranger-linux
            python-architecture: x64  # GitHub-hosted Linux runners only provide 64-bit interpreters
          - os: windows
            runner: windows-latest
            archive: OcarinaArranger-windows
            python-architecture: x64
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-architecture }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk libasound2-dev

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller simpleaudio

      - name: Stamp application version
        run: |
          python scripts/stamp_version.py "${{ github.ref_name }}"

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --clean --noconfirm packaging/ocarina_arranger.spec

      - name: Package archive
        run: |
          python scripts/create_release_archive.py ${{ matrix.archive }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive }}
          path: ${{ matrix.archive }}.zip
          retention-days: 7

  publish:
    name: Publish release assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Collect archives
        run: |
          mkdir -p release dist
          find release -name '*.zip' -exec mv {} dist/ \;

      - name: Generate release notes
        id: release_notes
        run: |
          set -eo pipefail
          tag="${GITHUB_REF_NAME}"
          tag_ref="refs/tags/${tag}"
          tag_message=$(git for-each-ref --format='%(contents)' "$tag_ref")

          if [ -n "$tag_message" ]; then
            body="$tag_message\n\n"
          else
            body=""
          fi

          if git rev-parse --verify "$tag^" >/dev/null 2>&1; then
            previous_tag=$(git describe --tags --abbrev=0 "$tag^" 2>/dev/null || true)
          else
            previous_tag=""
          fi

          if [ -n "$previous_tag" ]; then
            commit_range="${previous_tag}..${tag}"
          else
            commit_range="$tag"
          fi

          commits=$(git log --pretty=format:'- %s' "$commit_range")

          body="${body}${commits}"

          {
            echo "body<<'EOF'"
            echo "$body"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: Ocarina Arranger ${{ github.ref_name }}
          files: dist/*.zip
          body: ${{ steps.release_notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
